/*
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * The version of the OpenAPI document: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`api_web_period_alert_controller_period_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWebPeriodAlertControllerPeriodIndexError {
    Status429(crate::models::TooManyRequests),
    Status403(crate::models::Forbidden),
    Status400(crate::models::BadRequest),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_web_period_alert_controller_period_show`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWebPeriodAlertControllerPeriodShowError {
    Status429(crate::models::TooManyRequests),
    Status406(crate::models::NotAcceptable),
    Status404(crate::models::NotFound),
    Status403(crate::models::Forbidden),
    Status400(crate::models::BadRequest),
    UnknownValue(serde_json::Value),
}


/// List active and upcoming system alerts  An effect (enumerated in `/data/{index}/attributes/effect` and human-readable in `/data/{index}/attributes/service_effect`) on a provided service (facility, route, route type, stop and/or trip in `//data/{index}/attributes/informed_entity`) described by a banner (`/data/{index}/attributes/banner`), short header (`/data/{index}/attributes/short_header`), header `/data/{index}/attributes/header`, description (`/data/{index}/attributes/description`), image (`/data/{index}/attributes/image`), and image alternative text (`/data/{index}/attributes/image_alternative_text`) that is active for one or more periods(`/data/{index}/attributes/active_period`) caused by a cause (`/data/{index}/attribute/cause`) that somewhere in its lifecycle (enumerated in `/data/{index}/attributes/lifecycle` and human-readable in `/data/{index}/attributes/timeframe`).  See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert)  ## Descriptions  There are 7 descriptive attributes.  | JSON pointer                                | Usage                                                                           | |---------------------------------------------|---------------------------------------------------------------------------------| | `/data/{index}/attributes/banner`       | Display as alert across application/website                                     | | `/data/{index}/attributes/short_header` | When `/data/{index}/attributes/header` is too long to display               | | `/data/{index}/attributes/header`       | Used before showing and prepended to `/data/{index}/attributes/description` | | `/data/{index}/attributes/description`  | Used when user asks to expand alert.                                            | | `/data/{index}/attributes/image`        | URL to descriptive image.                                                       | | `/data/{index}/attributes/image_alternative_text`  | Text that describes image linked in url                              |  ## Effect  | JSON pointer                                  |                | |-----------------------------------------------|----------------| | `/data/{index}/attributes/effect`         | Enumerated     | | `/data/{index}/attributes/service_effect` | Human-readable |  ## Timeline  There are 3 timeline related attributes  | JSON pointer                                 | Description                                                                              | |----------------------------------------------|------------------------------------------------------------------------------------------| | `/data/{index}/attributes/active_period` | Exact Date/Time ranges alert is active                                                   | | `/data/{index}/attributes/lifecycle`     | Enumerated, machine-readable description of `/data/{index}/attributes/active_period` | | `/data/{index}/attributes/timeframe`     | Human-readable description of `/data/{index}/attributes/active_period`               |   ## Activities  Alerts are by default filtered to those where `/data/{index}/attributes/informed_entity/{informed_entity_index}/activities/{activity_index}` in one of BOARDEXITRIDE, as these cover most riders.  If you want all alerts without filtering by activity, you should use the special value `\"ALL\"`: `filter[activity]=ALL`.  ### Accessibility  The default activities cover if boarding, exiting, or riding is generally affected for all riders by the alert. If ONLY wheelchair using riders are affected, such as if a ramp, lift, or safety system for wheelchairs is affected, only the `\"USING_WHEELCHAIR\"` activity will be set. To cover wheelchair using rider, filter on the defaults and `\"USING_WHEELCHAIR\"`: `filter[activity]=USING_WHEELCHAIR,BOARD,EXIT,RIDE`.  Similarly for riders with limited mobility that need escalators, `\"USING_ESCALATOR\"` should be added to the defaults: `filter[activity]=USING_ESCALATOR,BOARD,EXIT,RIDE`.  
pub async fn api_web_period_alert_controller_period_index(configuration: &configuration::Configuration, page_left_square_bracket_offset_right_square_bracket: Option<i32>, page_left_square_bracket_limit_right_square_bracket: Option<i32>, sort: Option<&str>, fields_left_square_bracket_alert_right_square_bracket: Option<&str>, include: Option<&str>, filter_left_square_bracket_activity_right_square_bracket: Option<&str>, filter_left_square_bracket_route_type_right_square_bracket: Option<&str>, filter_left_square_bracket_direction_id_right_square_bracket: Option<&str>, filter_left_square_bracket_route_right_square_bracket: Option<&str>, filter_left_square_bracket_stop_right_square_bracket: Option<&str>, filter_left_square_bracket_trip_right_square_bracket: Option<&str>, filter_left_square_bracket_facility_right_square_bracket: Option<&str>, filter_left_square_bracket_id_right_square_bracket: Option<&str>, filter_left_square_bracket_banner_right_square_bracket: Option<&str>, filter_left_square_bracket_datetime_right_square_bracket: Option<&str>, filter_left_square_bracket_lifecycle_right_square_bracket: Option<&str>, filter_left_square_bracket_severity_right_square_bracket: Option<&str>) -> Result<crate::models::Alerts, Error<ApiWebPeriodAlertControllerPeriodIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/alerts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_left_square_bracket_offset_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("page[offset]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_left_square_bracket_limit_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("page[limit]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields_left_square_bracket_alert_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("fields[alert]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include {
        local_var_req_builder = local_var_req_builder.query(&[("include", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_activity_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[activity]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_route_type_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[route_type]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_direction_id_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[direction_id]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_route_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[route]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_stop_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[stop]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_trip_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[trip]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_facility_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[facility]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_id_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[id]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_banner_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[banner]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_datetime_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[datetime]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_lifecycle_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[lifecycle]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_severity_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[severity]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("api_key", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiWebPeriodAlertControllerPeriodIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Show a particular alert by the alert's id  An effect (enumerated in `/data/attributes/effect` and human-readable in `/data/attributes/service_effect`) on a provided service (facility, route, route type, stop and/or trip in `//data/attributes/informed_entity`) described by a banner (`/data/attributes/banner`), short header (`/data/attributes/short_header`), header `/data/attributes/header`, description (`/data/attributes/description`), image (`/data/attributes/image`), and image alternative text (`/data/attributes/image_alternative_text`) that is active for one or more periods(`/data/attributes/active_period`) caused by a cause (`/data/attribute/cause`) that somewhere in its lifecycle (enumerated in `/data/attributes/lifecycle` and human-readable in `/data/attributes/timeframe`).  See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert)  ## Descriptions  There are 7 descriptive attributes.  | JSON pointer                                | Usage                                                                           | |---------------------------------------------|---------------------------------------------------------------------------------| | `/data/attributes/banner`       | Display as alert across application/website                                     | | `/data/attributes/short_header` | When `/data/attributes/header` is too long to display               | | `/data/attributes/header`       | Used before showing and prepended to `/data/attributes/description` | | `/data/attributes/description`  | Used when user asks to expand alert.                                            | | `/data/attributes/image`        | URL to descriptive image.                                                       | | `/data/attributes/image_alternative_text`  | Text that describes image linked in url                              |  ## Effect  | JSON pointer                                  |                | |-----------------------------------------------|----------------| | `/data/attributes/effect`         | Enumerated     | | `/data/attributes/service_effect` | Human-readable |  ## Timeline  There are 3 timeline related attributes  | JSON pointer                                 | Description                                                                              | |----------------------------------------------|------------------------------------------------------------------------------------------| | `/data/attributes/active_period` | Exact Date/Time ranges alert is active                                                   | | `/data/attributes/lifecycle`     | Enumerated, machine-readable description of `/data/attributes/active_period` | | `/data/attributes/timeframe`     | Human-readable description of `/data/attributes/active_period`               |  
pub async fn api_web_period_alert_controller_period_show(configuration: &configuration::Configuration, id: &str, fields_left_square_bracket_alert_right_square_bracket: Option<&str>, include: Option<&str>) -> Result<crate::models::Alert, Error<ApiWebPeriodAlertControllerPeriodShowError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/alerts/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields_left_square_bracket_alert_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("fields[alert]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include {
        local_var_req_builder = local_var_req_builder.query(&[("include", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("api_key", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiWebPeriodAlertControllerPeriodShowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

