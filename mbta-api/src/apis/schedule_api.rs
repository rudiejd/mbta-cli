/*
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * The version of the OpenAPI document: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`api_web_period_schedule_controller_period_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWebPeriodScheduleControllerPeriodIndexError {
    Status429(crate::models::TooManyRequests),
    Status403(crate::models::Forbidden),
    Status400(crate::models::BadRequest),
    UnknownValue(serde_json::Value),
}


/// **NOTE:** `filter[route]`, `filter[stop]`, or `filter[trip]` **MUST** be present for any schedules to be returned.  List of schedules.  To get a realtime prediction instead of the scheduled times, use `/predictions`.  A schedule is the arrival drop off (`/data/{index}/attributes/drop_off_type`) time (`/data/{index}/attributes/arrival_time`) and departure pick up (`/data/{index}/attributes/pickup_type`) time (`/data/{index}/attributes/departure_time`) to/from a stop (`/data/{index}/relationships/stop/data/id`) at a given sequence (`/data/{index}/attributes/stop_sequence`) along a trip (`/data/{index}/relationships/trip/data/id`) going in a direction (`/data/{index}/attributes/direction_id`) on a route (`/data/{index}/relationships/route/data/id`) when the trip is following a service (`/data/{index}/relationships/service/data/id`) to determine when it is active.  See [GTFS `stop_times.txt`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) for base specification.   ## When a vehicle is scheduled to be at a stop  `/schedules?filter[stop]=STOP_ID`  ## The schedule for one route  `/schedules?filter[route]=ROUTE_ID`  ### When a route is open  Query for the `first` and `last` stops on the route.  `/schedules?filter[route]=ROUTE_ID&filter[stop_sequence]=first,last`  ## The schedule for a whole trip  `/schedule?filter[trip]=TRIP_ID`  
pub async fn api_web_period_schedule_controller_period_index(configuration: &configuration::Configuration, page_left_square_bracket_offset_right_square_bracket: Option<i32>, page_left_square_bracket_limit_right_square_bracket: Option<i32>, sort: Option<&str>, fields_left_square_bracket_schedule_right_square_bracket: Option<&str>, include: Option<&str>, filter_left_square_bracket_date_right_square_bracket: Option<String>, filter_left_square_bracket_direction_id_right_square_bracket: Option<&str>, filter_left_square_bracket_route_type_right_square_bracket: Option<&str>, filter_left_square_bracket_min_time_right_square_bracket: Option<&str>, filter_left_square_bracket_max_time_right_square_bracket: Option<&str>, filter_left_square_bracket_route_right_square_bracket: Option<&str>, filter_left_square_bracket_stop_right_square_bracket: Option<&str>, filter_left_square_bracket_trip_right_square_bracket: Option<&str>, filter_left_square_bracket_stop_sequence_right_square_bracket: Option<&str>) -> Result<crate::models::Schedules, Error<ApiWebPeriodScheduleControllerPeriodIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/schedules", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_left_square_bracket_offset_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("page[offset]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_left_square_bracket_limit_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("page[limit]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields_left_square_bracket_schedule_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("fields[schedule]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include {
        local_var_req_builder = local_var_req_builder.query(&[("include", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_date_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[date]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_direction_id_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[direction_id]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_route_type_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[route_type]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_min_time_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[min_time]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_max_time_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[max_time]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_route_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[route]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_stop_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[stop]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_trip_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[trip]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_stop_sequence_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[stop_sequence]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("api_key", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiWebPeriodScheduleControllerPeriodIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

