/*
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * The version of the OpenAPI document: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LineResourceAttributes {
    /// This field can be used to specify a legible color to use for text drawn against a background of line_color. The color must be provided as a six-character hexadecimal number, for example, `FFD700`. 
    #[serde(rename = "text_color", skip_serializing_if = "Option::is_none")]
    pub text_color: Option<String>,
    /// Lines sort in ascending order
    #[serde(rename = "sort_order", skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<i32>,
    /// Short, public-facing name for the group of routes represented in this line 
    #[serde(rename = "short_name", skip_serializing_if = "Option::is_none")]
    pub short_name: Option<String>,
    /// Lengthier, public-facing name for the group of routes represented in this line 
    #[serde(rename = "long_name", skip_serializing_if = "Option::is_none")]
    pub long_name: Option<String>,
    /// In systems that have colors assigned to lines, the route_color field defines a color that corresponds to a line. The color must be provided as a six-character hexadecimal number, for example, `00FFFF`. 
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
}

impl LineResourceAttributes {
    pub fn new() -> LineResourceAttributes {
        LineResourceAttributes {
            text_color: None,
            sort_order: None,
            short_name: None,
            long_name: None,
            color: None,
        }
    }
}


