/*
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * The version of the OpenAPI document: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://openapi-generator.tech
 */

/// InformedEntity : An entity affected by an alert. At least one of the fields other than `activities` will be non-null. The affected entity is the intersection of these fields, not the union: if `stop` and `route` both have values, the alert does not affect the entire route.  See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `EntitySelector`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-entityselector).  * `activities` - The activities affected. * `direction_id` - The direction of the affected `trip`. See     [GTFS `trips.txt` `direction_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt). * `facility` - The facility affected. * `route` - The route affected. See     [GTFS `routes.txt` `route_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt) * `route_type` - The type of route affected. If present alone, indicates the entire mode of transit is affected. See     [GTFS `routes.txt` `route_type`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt) * `stop` - The stop affected. See     [GTFS `stops.txt` `stop_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt) * `trip` - The trip affected. See     [GTFS `trips.txt` `trip_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt) 



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InformedEntity {
    /// `id` of the affected Trip.
    #[serde(rename = "trip", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub trip: Option<Option<String>>,
    /// `id` of the affected Stop.
    #[serde(rename = "stop", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stop: Option<Option<String>>,
    /// `type` of the affected Route.  | Value | Name          | Example    | |-------|---------------|------------| | `0`   | Light Rail    | Green Line | | `1`   | Heavy Rail    | Red Line   | | `2`   | Commuter Rail |            | | `3`   | Bus           |            | | `4`   | Ferry         |            | 
    #[serde(rename = "route_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub route_type: Option<Option<i32>>,
    /// `id` of the affected Route.
    #[serde(rename = "route", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub route: Option<Option<String>>,
    /// `id` of the affected Facility.
    #[serde(rename = "facility", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub facility: Option<Option<String>>,
    /// `direction_id` of the affected Trip.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`. 
    #[serde(rename = "direction_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub direction_id: Option<Option<i32>>,
    /// Activities affected by this alert.  If an entity is a station platform, and the alert only impacts those boarding at that platform and no one else, and the activity `\"BOARD\"` represents customers boarding at the informed entity, then the entity includes `activities` `[\"BOARD\"]`. If the alert affected customers exiting at the platform too, then `activities` is `[\"BOARD\", \"EXIT\"]`.  It should be noted that the `activities` array includes activities that are specifically affected. Thus if there were activities `\"BOARD\"`, `\"EXIT\"`, and `\"USING_WHEELCHAIR\"` [to board or exit], and a station were closed, then the `activities` array would include `\"BOARD\"` and `\"EXIT\"` but it would not be necessary to include the activity `\"USING_WHEELCHAIR\"`. Any rider entering the station who is `\"USING_WHEELCHAIR\"` is also a rider who `\"BOARD\"`s. Using a wheelchair to board is not specifically affected. 
    #[serde(rename = "activities", skip_serializing_if = "Option::is_none")]
    pub activities: Option<Vec<String>>,
}

impl InformedEntity {
    /// An entity affected by an alert. At least one of the fields other than `activities` will be non-null. The affected entity is the intersection of these fields, not the union: if `stop` and `route` both have values, the alert does not affect the entire route.  See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `EntitySelector`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-entityselector).  * `activities` - The activities affected. * `direction_id` - The direction of the affected `trip`. See     [GTFS `trips.txt` `direction_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt). * `facility` - The facility affected. * `route` - The route affected. See     [GTFS `routes.txt` `route_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt) * `route_type` - The type of route affected. If present alone, indicates the entire mode of transit is affected. See     [GTFS `routes.txt` `route_type`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt) * `stop` - The stop affected. See     [GTFS `stops.txt` `stop_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt) * `trip` - The trip affected. See     [GTFS `trips.txt` `trip_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt) 
    pub fn new() -> InformedEntity {
        InformedEntity {
            trip: None,
            stop: None,
            route_type: None,
            route: None,
            facility: None,
            direction_id: None,
            activities: None,
        }
    }
}


