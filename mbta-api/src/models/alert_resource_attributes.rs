/*
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * The version of the OpenAPI document: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertResourceAttributes {
    /// A URL for extra details, such as outline construction or maintenance plans.
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<String>>,
    /// Date/Time alert last updated. Format is ISO8601.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Summarizes when an alert is in effect.
    #[serde(rename = "timeframe", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub timeframe: Option<Option<String>>,
    /// A shortened version of `*_/attributes/header`.
    #[serde(rename = "short_header", skip_serializing_if = "Option::is_none")]
    pub short_header: Option<String>,
    /// How severe the alert it from least (`0`) to most (`10`) severe.
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<i32>,
    /// Summarizes the service and the impact to that service.
    #[serde(rename = "service_effect", skip_serializing_if = "Option::is_none")]
    pub service_effect: Option<String>,
    /// Identifies whether alert is a new or old, in effect or upcoming.  | Value                | |----------------------| | `\"NEW\"`              | | `\"ONGOING\"`          | | `\"ONGOING_UPCOMING\"` | | `\"UPCOMING\"`         |  
    #[serde(rename = "lifecycle", skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<String>,
    /// Entities affected by this alert.
    #[serde(rename = "informed_entity", skip_serializing_if = "Option::is_none")]
    pub informed_entity: Option<Vec<crate::models::InformedEntity>>,
    /// Text describing the appearance of the linked image in the image field.
    #[serde(rename = "image_alternative_text", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image_alternative_text: Option<Option<String>>,
    /// URL of an image to be displayed alongside alert.
    #[serde(rename = "image", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image: Option<Option<String>>,
    /// This plain-text string will be highlighted, for example in boldface. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `header_text`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert) 
    #[serde(rename = "header", skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    /// Name of the alert
    #[serde(rename = "effect_name", skip_serializing_if = "Option::is_none")]
    pub effect_name: Option<String>,
    /// The effect of this problem on the affected entity.  | Value | |-------| | `\"ACCESS_ISSUE\"` | | `\"ADDITIONAL_SERVICE\"` | | `\"AMBER_ALERT\"` | | `\"BIKE_ISSUE\"` | | `\"CANCELLATION\"` | | `\"DELAY\"` | | `\"DETOUR\"` | | `\"DOCK_CLOSURE\"` | | `\"DOCK_ISSUE\"` | | `\"ELEVATOR_CLOSURE\"` | | `\"ESCALATOR_CLOSURE\"` | | `\"EXTRA_SERVICE\"` | | `\"FACILITY_ISSUE\"` | | `\"MODIFIED_SERVICE\"` | | `\"NO_SERVICE\"` | | `\"OTHER_EFFECT\"` | | `\"PARKING_CLOSURE\"` | | `\"PARKING_ISSUE\"` | | `\"POLICY_CHANGE\"` | | `\"SCHEDULE_CHANGE\"` | | `\"SERVICE_CHANGE\"` | | `\"SHUTTLE\"` | | `\"SNOW_ROUTE\"` | | `\"STATION_CLOSURE\"` | | `\"STATION_ISSUE\"` | | `\"STOP_CLOSURE\"` | | `\"STOP_MOVE\"` | | `\"STOP_MOVED\"` | | `\"SUMMARY\"` | | `\"SUSPENSION\"` | | `\"TRACK_CHANGE\"` | | `\"UNKNOWN_EFFECT\"` |  See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `effect`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert)  
    #[serde(rename = "effect", skip_serializing_if = "Option::is_none")]
    pub effect: Option<Effect>,
    /// This plain-text string will be formatted as the body of the alert (or shown on an explicit \"expand\" request by the user). The information in the description should add to the information of the header. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `description_text`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert) 
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    /// Date/Time alert created. Format is ISO8601.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// What is causing the alert.  | Value | |-------| | `\"ACCIDENT\"` | | `\"AMTRAK\"` | | `\"AN_EARLIER_MECHANICAL_PROBLEM\"` | | `\"AN_EARLIER_SIGNAL_PROBLEM\"` | | `\"AUTOS_IMPEDING_SERVICE\"` | | `\"COAST_GUARD_RESTRICTION\"` | | `\"CONGESTION\"` | | `\"CONSTRUCTION\"` | | `\"CROSSING_MALFUNCTION\"` | | `\"DEMONSTRATION\"` | | `\"DISABLED_BUS\"` | | `\"DISABLED_TRAIN\"` | | `\"DRAWBRIDGE_BEING_RAISED\"` | | `\"ELECTRICAL_WORK\"` | | `\"FIRE\"` | | `\"FOG\"` | | `\"FREIGHT_TRAIN_INTERFERENCE\"` | | `\"HAZMAT_CONDITION\"` | | `\"HEAVY_RIDERSHIP\"` | | `\"HIGH_WINDS\"` | | `\"HOLIDAY\"` | | `\"HURRICANE\"` | | `\"ICE_IN_HARBOR\"` | | `\"MAINTENANCE\"` | | `\"MECHANICAL_PROBLEM\"` | | `\"MEDICAL_EMERGENCY\"` | | `\"PARADE\"` | | `\"POLICE_ACTION\"` | | `\"POWER_PROBLEM\"` | | `\"SEVERE_WEATHER\"` | | `\"SIGNAL_PROBLEM\"` | | `\"SLIPPERY_RAIL\"` | | `\"SNOW\"` | | `\"SPECIAL_EVENT\"` | | `\"SPEED_RESTRICTION\"` | | `\"SWITCH_PROBLEM\"` | | `\"TIE_REPLACEMENT\"` | | `\"TRACK_PROBLEM\"` | | `\"TRACK_WORK\"` | | `\"TRAFFIC\"` | | `\"UNRULY_PASSENGER\"` | | `\"WEATHER\"` |  See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `Cause`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-cause)  
    #[serde(rename = "cause", skip_serializing_if = "Option::is_none")]
    pub cause: Option<Cause>,
    /// Set if alert is meant to be displayed prominently, such as the top of every page.
    #[serde(rename = "banner", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub banner: Option<Option<String>>,
    /// Date/Time ranges when alert is active. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `active_period`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert). 
    #[serde(rename = "active_period", skip_serializing_if = "Option::is_none")]
    pub active_period: Option<Vec<crate::models::ActivePeriod>>,
}

impl AlertResourceAttributes {
    pub fn new() -> AlertResourceAttributes {
        AlertResourceAttributes {
            url: None,
            updated_at: None,
            timeframe: None,
            short_header: None,
            severity: None,
            service_effect: None,
            lifecycle: None,
            informed_entity: None,
            image_alternative_text: None,
            image: None,
            header: None,
            effect_name: None,
            effect: None,
            description: None,
            created_at: None,
            cause: None,
            banner: None,
            active_period: None,
        }
    }
}

/// The effect of this problem on the affected entity.  | Value | |-------| | `\"ACCESS_ISSUE\"` | | `\"ADDITIONAL_SERVICE\"` | | `\"AMBER_ALERT\"` | | `\"BIKE_ISSUE\"` | | `\"CANCELLATION\"` | | `\"DELAY\"` | | `\"DETOUR\"` | | `\"DOCK_CLOSURE\"` | | `\"DOCK_ISSUE\"` | | `\"ELEVATOR_CLOSURE\"` | | `\"ESCALATOR_CLOSURE\"` | | `\"EXTRA_SERVICE\"` | | `\"FACILITY_ISSUE\"` | | `\"MODIFIED_SERVICE\"` | | `\"NO_SERVICE\"` | | `\"OTHER_EFFECT\"` | | `\"PARKING_CLOSURE\"` | | `\"PARKING_ISSUE\"` | | `\"POLICY_CHANGE\"` | | `\"SCHEDULE_CHANGE\"` | | `\"SERVICE_CHANGE\"` | | `\"SHUTTLE\"` | | `\"SNOW_ROUTE\"` | | `\"STATION_CLOSURE\"` | | `\"STATION_ISSUE\"` | | `\"STOP_CLOSURE\"` | | `\"STOP_MOVE\"` | | `\"STOP_MOVED\"` | | `\"SUMMARY\"` | | `\"SUSPENSION\"` | | `\"TRACK_CHANGE\"` | | `\"UNKNOWN_EFFECT\"` |  See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `effect`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert)  
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Effect {
    #[serde(rename = "ACCESS_ISSUE")]
    AccessIssue,
    #[serde(rename = "ADDITIONAL_SERVICE")]
    AdditionalService,
    #[serde(rename = "AMBER_ALERT")]
    AmberAlert,
    #[serde(rename = "BIKE_ISSUE")]
    BikeIssue,
    #[serde(rename = "CANCELLATION")]
    Cancellation,
    #[serde(rename = "DELAY")]
    Delay,
    #[serde(rename = "DETOUR")]
    Detour,
    #[serde(rename = "DOCK_CLOSURE")]
    DockClosure,
    #[serde(rename = "DOCK_ISSUE")]
    DockIssue,
    #[serde(rename = "ELEVATOR_CLOSURE")]
    ElevatorClosure,
    #[serde(rename = "ESCALATOR_CLOSURE")]
    EscalatorClosure,
    #[serde(rename = "EXTRA_SERVICE")]
    ExtraService,
    #[serde(rename = "FACILITY_ISSUE")]
    FacilityIssue,
    #[serde(rename = "MODIFIED_SERVICE")]
    ModifiedService,
    #[serde(rename = "NO_SERVICE")]
    NoService,
    #[serde(rename = "OTHER_EFFECT")]
    OtherEffect,
    #[serde(rename = "PARKING_CLOSURE")]
    ParkingClosure,
    #[serde(rename = "PARKING_ISSUE")]
    ParkingIssue,
    #[serde(rename = "POLICY_CHANGE")]
    PolicyChange,
    #[serde(rename = "SCHEDULE_CHANGE")]
    ScheduleChange,
    #[serde(rename = "SERVICE_CHANGE")]
    ServiceChange,
    #[serde(rename = "SHUTTLE")]
    Shuttle,
    #[serde(rename = "SNOW_ROUTE")]
    SnowRoute,
    #[serde(rename = "STATION_CLOSURE")]
    StationClosure,
    #[serde(rename = "STATION_ISSUE")]
    StationIssue,
    #[serde(rename = "STOP_CLOSURE")]
    StopClosure,
    #[serde(rename = "STOP_MOVE")]
    StopMove,
    #[serde(rename = "STOP_MOVED")]
    StopMoved,
    #[serde(rename = "SUMMARY")]
    Summary,
    #[serde(rename = "SUSPENSION")]
    Suspension,
    #[serde(rename = "TRACK_CHANGE")]
    TrackChange,
    #[serde(rename = "UNKNOWN_EFFECT")]
    UnknownEffect,
}

impl Default for Effect {
    fn default() -> Effect {
        Self::AccessIssue
    }
}
/// What is causing the alert.  | Value | |-------| | `\"ACCIDENT\"` | | `\"AMTRAK\"` | | `\"AN_EARLIER_MECHANICAL_PROBLEM\"` | | `\"AN_EARLIER_SIGNAL_PROBLEM\"` | | `\"AUTOS_IMPEDING_SERVICE\"` | | `\"COAST_GUARD_RESTRICTION\"` | | `\"CONGESTION\"` | | `\"CONSTRUCTION\"` | | `\"CROSSING_MALFUNCTION\"` | | `\"DEMONSTRATION\"` | | `\"DISABLED_BUS\"` | | `\"DISABLED_TRAIN\"` | | `\"DRAWBRIDGE_BEING_RAISED\"` | | `\"ELECTRICAL_WORK\"` | | `\"FIRE\"` | | `\"FOG\"` | | `\"FREIGHT_TRAIN_INTERFERENCE\"` | | `\"HAZMAT_CONDITION\"` | | `\"HEAVY_RIDERSHIP\"` | | `\"HIGH_WINDS\"` | | `\"HOLIDAY\"` | | `\"HURRICANE\"` | | `\"ICE_IN_HARBOR\"` | | `\"MAINTENANCE\"` | | `\"MECHANICAL_PROBLEM\"` | | `\"MEDICAL_EMERGENCY\"` | | `\"PARADE\"` | | `\"POLICE_ACTION\"` | | `\"POWER_PROBLEM\"` | | `\"SEVERE_WEATHER\"` | | `\"SIGNAL_PROBLEM\"` | | `\"SLIPPERY_RAIL\"` | | `\"SNOW\"` | | `\"SPECIAL_EVENT\"` | | `\"SPEED_RESTRICTION\"` | | `\"SWITCH_PROBLEM\"` | | `\"TIE_REPLACEMENT\"` | | `\"TRACK_PROBLEM\"` | | `\"TRACK_WORK\"` | | `\"TRAFFIC\"` | | `\"UNRULY_PASSENGER\"` | | `\"WEATHER\"` |  See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `Cause`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-cause)  
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Cause {
    #[serde(rename = "ACCIDENT")]
    Accident,
    #[serde(rename = "AMTRAK")]
    Amtrak,
    #[serde(rename = "AN_EARLIER_MECHANICAL_PROBLEM")]
    AnEarlierMechanicalProblem,
    #[serde(rename = "AN_EARLIER_SIGNAL_PROBLEM")]
    AnEarlierSignalProblem,
    #[serde(rename = "AUTOS_IMPEDING_SERVICE")]
    AutosImpedingService,
    #[serde(rename = "COAST_GUARD_RESTRICTION")]
    CoastGuardRestriction,
    #[serde(rename = "CONGESTION")]
    Congestion,
    #[serde(rename = "CONSTRUCTION")]
    Construction,
    #[serde(rename = "CROSSING_MALFUNCTION")]
    CrossingMalfunction,
    #[serde(rename = "DEMONSTRATION")]
    Demonstration,
    #[serde(rename = "DISABLED_BUS")]
    DisabledBus,
    #[serde(rename = "DISABLED_TRAIN")]
    DisabledTrain,
    #[serde(rename = "DRAWBRIDGE_BEING_RAISED")]
    DrawbridgeBeingRaised,
    #[serde(rename = "ELECTRICAL_WORK")]
    ElectricalWork,
    #[serde(rename = "FIRE")]
    Fire,
    #[serde(rename = "FOG")]
    Fog,
    #[serde(rename = "FREIGHT_TRAIN_INTERFERENCE")]
    FreightTrainInterference,
    #[serde(rename = "HAZMAT_CONDITION")]
    HazmatCondition,
    #[serde(rename = "HEAVY_RIDERSHIP")]
    HeavyRidership,
    #[serde(rename = "HIGH_WINDS")]
    HighWinds,
    #[serde(rename = "HOLIDAY")]
    Holiday,
    #[serde(rename = "HURRICANE")]
    Hurricane,
    #[serde(rename = "ICE_IN_HARBOR")]
    IceInHarbor,
    #[serde(rename = "MAINTENANCE")]
    Maintenance,
    #[serde(rename = "MECHANICAL_PROBLEM")]
    MechanicalProblem,
    #[serde(rename = "MEDICAL_EMERGENCY")]
    MedicalEmergency,
    #[serde(rename = "PARADE")]
    Parade,
    #[serde(rename = "POLICE_ACTION")]
    PoliceAction,
    #[serde(rename = "POWER_PROBLEM")]
    PowerProblem,
    #[serde(rename = "SEVERE_WEATHER")]
    SevereWeather,
    #[serde(rename = "SIGNAL_PROBLEM")]
    SignalProblem,
    #[serde(rename = "SLIPPERY_RAIL")]
    SlipperyRail,
    #[serde(rename = "SNOW")]
    Snow,
    #[serde(rename = "SPECIAL_EVENT")]
    SpecialEvent,
    #[serde(rename = "SPEED_RESTRICTION")]
    SpeedRestriction,
    #[serde(rename = "SWITCH_PROBLEM")]
    SwitchProblem,
    #[serde(rename = "TIE_REPLACEMENT")]
    TieReplacement,
    #[serde(rename = "TRACK_PROBLEM")]
    TrackProblem,
    #[serde(rename = "TRACK_WORK")]
    TrackWork,
    #[serde(rename = "TRAFFIC")]
    Traffic,
    #[serde(rename = "UNRULY_PASSENGER")]
    UnrulyPassenger,
    #[serde(rename = "WEATHER")]
    Weather,
}

impl Default for Cause {
    fn default() -> Cause {
        Self::Accident
    }
}

