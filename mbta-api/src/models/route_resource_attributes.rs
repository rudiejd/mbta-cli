/*
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * The version of the OpenAPI document: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RouteResourceAttributes {
    /// | Value | Name          | Example    | |-------|---------------|------------| | `0`   | Light Rail    | Green Line | | `1`   | Heavy Rail    | Red Line   | | `2`   | Commuter Rail |            | | `3`   | Bus           |            | | `4`   | Ferry         |            | 
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<i32>,
    /// A legible color to use for text drawn against a background of the route's `color` attribute. See [GTFS `routes.txt` `route_text_color`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt). 
    #[serde(rename = "text_color", skip_serializing_if = "Option::is_none")]
    pub text_color: Option<String>,
    /// Routes sort in ascending order
    #[serde(rename = "sort_order", skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<i32>,
    /// This will often be a short, abstract identifier like \"32\", \"100X\", or \"Green\" that riders use to identify a route, but which doesn't give any indication of what places the route serves. See [GTFS `routes.txt` `route_short_name`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt). 
    #[serde(rename = "short_name", skip_serializing_if = "Option::is_none")]
    pub short_name: Option<String>,
    /// The full name of a route. This name is generally more descriptive than the `short_name` and will often include the route's destination or stop. See [GTFS `routes.txt` `route_long_name`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt). 
    #[serde(rename = "long_name", skip_serializing_if = "Option::is_none")]
    pub long_name: Option<String>,
    /// Specifies the fare type of the route, which can differ from the service category. 
    #[serde(rename = "fare_class", skip_serializing_if = "Option::is_none")]
    pub fare_class: Option<String>,
    #[serde(rename = "direction_names", skip_serializing_if = "Option::is_none")]
    pub direction_names: Option<Vec<String>>,
    #[serde(rename = "direction_destinations", skip_serializing_if = "Option::is_none")]
    pub direction_destinations: Option<Vec<String>>,
    /// Details about stops, schedule, and/or service.  See [GTFS `routes.txt` `route_desc`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt). 
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A color that corresponds to the route, such as the line color on a map.\" See [GTFS `routes.txt` `route_color`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt). 
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
}

impl RouteResourceAttributes {
    pub fn new() -> RouteResourceAttributes {
        RouteResourceAttributes {
            r#type: None,
            text_color: None,
            sort_order: None,
            short_name: None,
            long_name: None,
            fare_class: None,
            direction_names: None,
            direction_destinations: None,
            description: None,
            color: None,
        }
    }
}


