/*
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * The version of the OpenAPI document: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://openapi-generator.tech
 */

/// ScheduleResource : A schedule is the arrival drop off (`*_/attributes/drop_off_type`) time (`*_/attributes/arrival_time`) and departure pick up (`*_/attributes/pickup_type`) time (`*_/attributes/departure_time`) to/from a stop (`*_/relationships/stop/data/id`) at a given sequence (`*_/attributes/stop_sequence`) along a trip (`*_/relationships/trip/data/id`) going in a direction (`*_/attributes/direction_id`) on a route (`*_/relationships/route/data/id`) when the trip is following a service (`*_/relationships/service/data/id`) to determine when it is active.  See [GTFS `stop_times.txt`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) for base specification. 



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleResource {
    /// The JSON-API resource type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "relationships", skip_serializing_if = "Option::is_none")]
    pub relationships: Option<Box<crate::models::ScheduleResourceRelationships>>,
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// The JSON-API resource ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Box<crate::models::ScheduleResourceAttributes>>,
}

impl ScheduleResource {
    /// A schedule is the arrival drop off (`*_/attributes/drop_off_type`) time (`*_/attributes/arrival_time`) and departure pick up (`*_/attributes/pickup_type`) time (`*_/attributes/departure_time`) to/from a stop (`*_/relationships/stop/data/id`) at a given sequence (`*_/attributes/stop_sequence`) along a trip (`*_/relationships/trip/data/id`) going in a direction (`*_/attributes/direction_id`) on a route (`*_/relationships/route/data/id`) when the trip is following a service (`*_/relationships/service/data/id`) to determine when it is active.  See [GTFS `stop_times.txt`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) for base specification. 
    pub fn new() -> ScheduleResource {
        ScheduleResource {
            r#type: None,
            relationships: None,
            links: None,
            id: None,
            attributes: None,
        }
    }
}


