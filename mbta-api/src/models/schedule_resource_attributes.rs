/*
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * The version of the OpenAPI document: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleResourceAttributes {
    /// | Value   | `*_/attributes/arrival_time` and `*_/attributes/departure_time` | |---------|---------------------------------------------------------------| | `true`  | Exact                                                         | | `false` | Estimates                                                     |  See [GTFS `stop_times.txt` `timepoint`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) 
    #[serde(rename = "timepoint", skip_serializing_if = "Option::is_none")]
    pub timepoint: Option<bool>,
    /// The sequence the `stop_id` is arrived at during the `trip_id`.  The stop sequence is monotonically increasing along the trip, but the `stop_sequence` along the `trip_id` are not necessarily consecutive.  See [GTFS `stop_times.txt` `stop_sequence`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) 
    #[serde(rename = "stop_sequence", skip_serializing_if = "Option::is_none")]
    pub stop_sequence: Option<i32>,
    /// Text identifying destination of the trip, overriding trip-level headsign if present.See [GTFS `stop_times.txt` `stop_headsign`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) 
    #[serde(rename = "stop_headsign", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stop_headsign: Option<Option<String>>,
    /// How the vehicle departs from `stop_id`.  | Value | Description                                   | |-------|-----------------------------------------------| | `0`   | Regularly scheduled pickup                    | | `1`   | No pickup available                           | | `2`   | Must phone agency to arrange pickup           | | `3`   | Must coordinate with driver to arrange pickup |  See [GTFS `stop_times.txt` `pickup_type`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) 
    #[serde(rename = "pickup_type", skip_serializing_if = "Option::is_none")]
    pub pickup_type: Option<i32>,
    /// How the vehicle arrives at `stop_id`.  | Value | Description                                   | |-------|-----------------------------------------------| | `0`   | Regularly scheduled drop off                  | | `1`   | No drop off available                         | | `2`   | Must phone agency to arrange pickup           | | `3`   | Must coordinate with driver to arrange pickup |  See [GTFS `stop_times.txt` `drop_off_type`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) 
    #[serde(rename = "drop_off_type", skip_serializing_if = "Option::is_none")]
    pub drop_off_type: Option<i32>,
    /// Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.  
    #[serde(rename = "direction_id", skip_serializing_if = "Option::is_none")]
    pub direction_id: Option<i32>,
    /// Time when the trip departs the given stop. See [GTFS `stop_times.txt` `departure_time`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) Format is ISO8601. 
    #[serde(rename = "departure_time", skip_serializing_if = "Option::is_none")]
    pub departure_time: Option<String>,
    /// Time when the trip arrives at the given stop. See [GTFS `stop_times.txt` `arrival_time`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) Format is ISO8601. 
    #[serde(rename = "arrival_time", skip_serializing_if = "Option::is_none")]
    pub arrival_time: Option<String>,
}

impl ScheduleResourceAttributes {
    pub fn new() -> ScheduleResourceAttributes {
        ScheduleResourceAttributes {
            timepoint: None,
            stop_sequence: None,
            stop_headsign: None,
            pickup_type: None,
            drop_off_type: None,
            direction_id: None,
            departure_time: None,
            arrival_time: None,
        }
    }
}


