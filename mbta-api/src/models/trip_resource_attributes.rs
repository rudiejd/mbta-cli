/*
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * The version of the OpenAPI document: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TripResourceAttributes {
    /// Indicator of wheelchair accessibility: `0`, `1`, `2`  Wheelchair accessibility (`*_/attributes/wheelchair_accessible`) [as defined in GTFS](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt):  | Value | Meaning                                            | |-------|----------------------------------------------------| | `0`   | No information                                     | | `1`   | Accessible (at stops allowing wheelchair_boarding) | | `2`   | Inaccessible                                       |  
    #[serde(rename = "wheelchair_accessible", skip_serializing_if = "Option::is_none")]
    pub wheelchair_accessible: Option<i32>,
    /// The text that appears in schedules and sign boards to identify the trip to passengers, for example, to identify train numbers for commuter rail trips. See [GTFS `trips.txt` `trip_short_name`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt) 
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The text that appears on a sign that identifies the trip's destination to passengers. See [GTFS `trips.txt` `trip_headsign`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt). 
    #[serde(rename = "headsign", skip_serializing_if = "Option::is_none")]
    pub headsign: Option<String>,
    /// Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.  
    #[serde(rename = "direction_id", skip_serializing_if = "Option::is_none")]
    pub direction_id: Option<i32>,
    /// ID used to group sequential trips with the same vehicle for a given service_id. See [GTFS `trips.txt` `block_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt) 
    #[serde(rename = "block_id", skip_serializing_if = "Option::is_none")]
    pub block_id: Option<String>,
    /// Indicator of whether or not bikes are allowed on this trip: `0`, `1`, `2`  Bikes allowed (`*_/attributes/bikes_allowed`) [as defined in GTFS](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt):  | Value | Meaning                                                                         | |-------|---------------------------------------------------------------------------------| | `0`   | No information                                                                  | | `1`   | Vehicle being used on this particular trip can accommodate at least one bicycle | | `2`   | No bicycles are allowed on this trip                                            |  
    #[serde(rename = "bikes_allowed", skip_serializing_if = "Option::is_none")]
    pub bikes_allowed: Option<i32>,
}

impl TripResourceAttributes {
    pub fn new() -> TripResourceAttributes {
        TripResourceAttributes {
            wheelchair_accessible: None,
            name: None,
            headsign: None,
            direction_id: None,
            block_id: None,
            bikes_allowed: None,
        }
    }
}


