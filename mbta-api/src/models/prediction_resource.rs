/*
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * The version of the OpenAPI document: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://openapi-generator.tech
 */

/// PredictionResource : The predicted arrival time (`/_*_/attributes/arrival_time`) and departure time (`*_/attributes/departure_time`) to/from a stop (`*_/relationships/stop/data/id`) at a given sequence (`*_/attriutes/stop_sequence`) along a trip (`*_/relationships/trip/data/id`) going a direction (`*_/attributes/direction_id`) along a route (`*_/relationships/route/data/id`).  See [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `TripDescriptor`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-tripdescriptor) See [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `StopTimeUpdate`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-stoptimeupdate) 



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PredictionResource {
    /// The JSON-API resource type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "relationships", skip_serializing_if = "Option::is_none")]
    pub relationships: Option<Box<crate::models::PredictionResourceRelationships>>,
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// The JSON-API resource ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Box<crate::models::PredictionResourceAttributes>>,
}

impl PredictionResource {
    /// The predicted arrival time (`/_*_/attributes/arrival_time`) and departure time (`*_/attributes/departure_time`) to/from a stop (`*_/relationships/stop/data/id`) at a given sequence (`*_/attriutes/stop_sequence`) along a trip (`*_/relationships/trip/data/id`) going a direction (`*_/attributes/direction_id`) along a route (`*_/relationships/route/data/id`).  See [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `TripDescriptor`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-tripdescriptor) See [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `StopTimeUpdate`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-stoptimeupdate) 
    pub fn new() -> PredictionResource {
        PredictionResource {
            r#type: None,
            relationships: None,
            links: None,
            id: None,
            attributes: None,
        }
    }
}


